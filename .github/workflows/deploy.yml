name: Build and Deploy to VPS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Output image digest
      if: github.event_name != 'pull_request'
      run: |
        echo "Image digest: ${{ steps.build.outputs.digest }}"
        echo "Image tags: ${{ steps.meta.outputs.tags }}"

  deploy-to-vps:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: Deploy vps
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: 22
        script: |
          # Navigate to app directory
          cd /root/stock-pick-game-2 || { echo "App directory not found"; exit 1; }
          
          # Pull latest image
          echo "🔄 Pulling latest Docker image..."
          docker-compose -f docker-compose.prod.yml pull
          
          # Stop existing containers
          echo "🛑 Stopping existing containers..."
          docker-compose -f docker-compose.prod.yml down --remove-orphans
          
          # Start services with new image
          echo "🚀 Starting services..."
          docker-compose -f docker-compose.prod.yml up -d
          
          # Wait for services to be healthy
          echo "⏱️ Waiting for services to start..."
          sleep 15
          
          # Check service health
          echo "🔍 Checking service health..."
          if curl -f http://localhost:6969/health > /dev/null 2>&1; then
            echo "✅ Application is healthy and running"
          else
            echo "⚠️ Health check failed, checking logs..."
            docker-compose -f docker-compose.prod.yml logs --tail=20
          fi
          
          # Show current status
          echo "📊 Current container status:"
          docker-compose -f docker-compose.prod.yml ps
          
          echo "🎉 Deployment completed successfully!"
          echo "Application available at: https://stockpickgame.tideye.com"
